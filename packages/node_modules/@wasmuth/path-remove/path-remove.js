import check from "check-arg-types";

import pathGet from "@wasmuth/path";
import pathSet from "@wasmuth/path-set";
import without from "@wasmuth/without";
import last from "@wasmuth/last";
import partial from "@wasmuth/partial";

const toType = check.prototype.toType;

export default function pathRemove(path, state) {
  if (arguments.length < 2) return partial(pathSet, arguments);
  const parent = pathGet(path.slice(0, -1), state);
  const parentType = toType(parent);
  if (parentType === "object") {
    return path.length > 1
      ? pathSet(path.slice(0, -1), without(path.slice(-1), parent), state)
      : without(path, state);
  } else if (parentType === "array") {
    const idx = last(path);
    if (toType(idx) === "number") {
      return pathSet(
        path.slice(0, -1),
        parent.slice(0, idx).concat(parent.slice(idx + 1)),
        state
      );
    }
  }
  return pathSet(path, null, state);
}
