import check from 'check-arg-types'

import pathGet from '@wasmuth/path'
import pathSet from '@wasmuth/path-set'
import merge from '@wasmuth/merge'
import without from '@wasmuth/without'
import last from '@wasmuth/last'

const toType = check.prototype.toType

function pathUpdate (path, payload, state) {
  const { value } = payload
  const currentValue = pathGet(path, state)
  const newType = toType(value)

  if (newType === toType(currentValue)) {
    if (newType === 'array') {
      return pathSet(path, currentValue.concat(value), state)
    } else if (newType === 'object') {
      return pathSet(path, merge(currentValue, value), state)
    }
  }
  return pathSet(path, value, state)
}

function pathRemove (path, payload, state) {
  const parent = pathGet(path.slice(0, -1), state)
  const parentType = toType(parent)
  if (parentType === 'object') {
    return path.length > 1
      ? pathSet(
        path.slice(0, -1),
        without(path.slice(-1), parent),
        state
      )
      : without(path, state)
  } else if (parentType === 'array') {
    const idx = last(path)
    if (toType(idx) === 'number') {
      parent.splice(idx, 1)
      return pathSet(path.slice(0, -1), parent, state)
    }
  }
  return pathSet(path, null, state)
}

function batch (payload, state) {
  const { actions } = payload
  if (!actions || !actions.length) {
    return state
  }
  const len = actions.length
  let newState = state
  for (let x = 0; x < len; x++) {
    newState = pathReducer(newState, actions[x])
  }
  return newState
}

export const actions = {
  set (path, value) {
    return { type: 'PATH_SET', payload: { path, value } }
  },

  update (path, value) {
    return { type: 'PATH_UPDATE', payload: { path, value } }
  },

  remove (path) {
    return { type: 'PATH_REMOVE', payload: { path } }
  },

  batch () {
    return { type: 'PATH_BATCH', payload: { actions: [].slice.call(arguments) } }
  }
}

export default function pathReducer (action, state) {
  const { type, payload } = action
  const path = pathGet('path', payload || {})
  switch (type) {
    case 'PATH_SET':
      return pathSet(path, payload.value, state)

    case 'PATH_UPDATE':
      return pathUpdate(path, payload, state)

    case 'PATH_REMOVE':
      return pathRemove(path, payload, state)

    case 'PATH_BATCH':
      return batch(payload, state)

    default:
      return state
  }
}
