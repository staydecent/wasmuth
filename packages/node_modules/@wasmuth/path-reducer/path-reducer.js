import pathGet from "@wasmuth/path";
import pathSet from "@wasmuth/path-set";
import pathUpdate from "@wasmuth/path-update";
import pathRemove from "@wasmuth/path-remove";

function batch(payload, state) {
  const {actions} = payload;
  if (!actions || !actions.length) {
    return state;
  }
  const len = actions.length;
  let newState = state;
  for (let x = 0; x < len; x++) {
    newState = pathReducer(newState, actions[x]);
  }
  return newState;
}

export const actions = {
  set(path, value) {
    return {type: "PATH_SET", payload: {path, value}};
  },

  update(path, value) {
    return {type: "PATH_UPDATE", payload: {path, value}};
  },

  remove(path) {
    return {type: "PATH_REMOVE", payload: {path}};
  },

  batch() {
    return {
      type: "PATH_BATCH",
      payload: {actions: [].slice.call(arguments)},
    };
  },
};

export default function pathReducer(action, state) {
  const {type, payload} = action;
  const path = pathGet("path", payload || {});
  switch (type) {
    case "PATH_SET":
      return pathSet(path, payload.value, state);

    case "PATH_UPDATE":
      return pathUpdate(path, payload.value, state);

    case "PATH_REMOVE":
      return pathRemove(path, state);

    case "PATH_BATCH":
      return batch(payload, state);

    default:
      return state;
  }
}
